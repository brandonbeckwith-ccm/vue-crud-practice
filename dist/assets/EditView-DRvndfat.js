import{d as N,r as _,c as k,n as y,b,w as s,x as C,o as V,e as r,y as h,g as n,j as i,z as c}from"./index-At98WpfT.js";import{b as w,F as x,r as g,n as $,c as T,e as B,_ as I,I as m,p as q,a as F}from"./Validators-CdYQfDex.js";const j=N({__name:"EditView",setup(P){var l;const p=(l=C().query.id)==null?void 0:l.toString(),a=_({todoName:"To be done...",_id:"",isComplete:!1}),f=k(()=>a.value.todoName),o=w({todoName:{required:g,noSymbols:$,containsVue:T}},{todoName:f});async function v(){try{const{data:e}=await B({todoName:"",isComplete:!1,_id:p});a.value=e.data,console.dir(e)}catch(e){console.log(e)}}async function d(){if(o.value.$touch(),!o.value.$error)try{const e={todoName:a.value.todoName,isComplete:!1,_id:""};await q(e),await F(a.value),c.push({name:"home"})}catch(e){alert("Failed to save edits!"),console.dir(e)}}return y(()=>{v()}),(e,t)=>(V(),b(x,{class:"big-card"},{default:s(()=>[r(I,{onKeypress:h(d,["enter"]),placeholder:"Todo...",modelValue:a.value.todoName,"onUpdate:modelValue":t[0]||(t[0]=u=>a.value.todoName=u),class:"filter-text",invalid:n(o).todoName.$invalid,errors:n(o).todoName.$errors},null,8,["modelValue","invalid","errors"]),r(m,{class:"back-button",onClick:t[1]||(t[1]=u=>n(c).push({name:"home"}))},{default:s(()=>[i(" Back ")]),_:1}),r(m,{class:"save-button",onClick:d},{default:s(()=>[i(" Save ")]),_:1})]),_:1}))}});export{j as default};
